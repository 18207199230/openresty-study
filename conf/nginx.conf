worker_processes  2;        #nginx worker 数量
error_log /Users/wangwei/Study/openresty/logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 20480;
    use kqueue;
}

#worker_rlimit_nofile 65535;

http {
    lua_shared_dict my_cache 128m;
    lua_shared_dict my_locks 1m;
    lua_shared_dict session_cache 10m; #存储session的缓存，在线服，内存请设置大一些
    lua_shared_dict test_cache 10m;
 server {
     #监听端口，若你的86端口已经被占用，则需要修改
        listen 85;
        listen [::]:85;
        #不需要重启nginx可以事实看到测试效果
        #lua_code_cache off;
        location / {
            default_type text/html;
        }
        location /mixed {
            #流程分支处理判断变量初始化
            set_by_lua_block $a {
                ngx.log(ngx.ERR, "set_by_lua*")
            }
            #转发、重定向、缓存等功能(例如特定请求代理到外网)
            rewrite_by_lua_block {
                ngx.log(ngx.ERR, "rewrite_by_lua*")
            }
            #IP 准入、接口权限等情况集中处理(例如配合 iptable 完成简单防火墙)
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua*")
                ngx.say('33333')
            }
            #内容生成
            content_by_lua_block {
                ngx.log(ngx.ERR, "content_by_lua*")
                ngx.say('444444')
            }
            #响应头部过滤处理(例如添加头部信息)
            header_filter_by_lua_block {
                ngx.log(ngx.ERR, "header_filter_by_lua*")
            }
            #响应体过滤处理(例如完成应答内容统一成大写)
            body_filter_by_lua_block {
                ngx.log(ngx.ERR, "body_filter_by_lua*")
            }
            #会话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)
            log_by_lua_block {
                ngx.log(ngx.ERR, "log_by_lua*")
            }
        }
        location ~ '^/lua/(\w+(?:\/\w+)*)$' {
            #access_by_lua_file /Users/user/openresty/ngx_lua/access/bulling.lua;
            content_by_lua_file /Users/wangwei/Study/openresty/ngx_lua/$1.lua;
        }
        location /api/index_test {
            default_type text/html;
            content_by_lua_file /Users/wangwei/Study/openresty/ngx_lua/var_share/index_tes.lua;
        }

        location /limit{
            access_by_lua_block {
                -- 设定当前请求的响应上限是 每秒 300K 字节
                ngx.var.limit_rate = "0.1K"
            }
            content_by_lua_block {
                ngx.say(1212)
            }
        }
        #不同阶段共享变量
        location /ctx {
             rewrite_by_lua_block {
                 ngx.ctx.foo = 100
             }
             access_by_lua_block {
                 ngx.ctx.foo = ngx.ctx.foo + 3
             }
             content_by_lua_block {
                 ngx.say(ngx.ctx.foo)
             }
         }
    }
    #lua库依赖路径
    lua_package_path  "/Users/wangwei/Study/openresty/lualib/?.lua;;";
    lua_package_cpath  "/Users/wangwei/Study/openresty/lualib/?.so;;";
    #server配置
    include /Users/wangwei/Study/openresty/conf/domains/*;
}
